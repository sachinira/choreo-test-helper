openapi: 3.0.0
info:
  title: User Management Service
  description: A simple user management service with CRUD operations and AI-powered question answering
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server

paths:
  /:
    get:
      summary: Health check endpoint
      description: Returns a simple message indicating the service is running
      responses:
        '200':
          description: Service is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User Management Service is running"

  /users/:
    get:
      summary: Get all users
      description: Returns a list of all users in the system
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Creates a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the user
    get:
      summary: Get user by ID
      description: Returns a specific user by their ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "User not found"
    put:
      summary: Update user
      description: Updates an existing user's information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "User not found"
    delete:
      summary: Delete user
      description: Deletes a user from the system
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "User not found"

  /ask:
    post:
      summary: Ask a question to the AI assistant
      description: Sends a question to the OpenAI API and returns the response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question answered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                    description: The AI's response to the question
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Error message

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          format: email
          description: Email address of the user
        full_name:
          type: string
          description: Full name of the user
      required:
        - username
        - email
        - full_name

    Question:
      type: object
      properties:
        question:
          type: string
          description: The question to ask the AI assistant
      required:
        - question 